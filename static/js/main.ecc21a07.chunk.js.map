{"version":3,"sources":["helpers/translate.js","models/characterProfile.js","helpers/stringHelper.js","helpers/storageHelper.js","helpers/profileHelper.js","hooks/whydidyouupdate.js","components/Profile.js","App.js","reportWebVitals.js","index.js","localization/en-US.js"],"names":["translate","intl","key","values","formatMessage","id","charProfile","data","name","baseAtk","flatAtk","percAtk","critC","critD","percEle","decimalToPercent","num","toFixed","PROFILES_KEY","getStorageProfiles","profilesJson","window","localStorage","getItem","JSON","parse","storageAdd","item","setItem","getElePower","profile","sheetAtk","critPower","Math","min","round","useWhyDidYouUpdate","props","previousProps","useRef","useEffect","current","allKeys","Object","keys","changesObj","forEach","from","to","length","console","log","useInput","initState","stringId","inputProps","useIntl","useState","state","setState","onChange","e","currentTarget","value","input","type","maxLength","size","Profile","onProfileChange","profileData","setProfileData","components","initProfile","nameComponent","nameState","baseAtkComponent","baseAtkState","flatAtkComponent","flatAtkState","percAtkComponent","percAtkState","critRateComponent","critRateState","critDmgComponent","critDmgState","eleDmgComponent","eleDmgState","result","parseInt","Fragment","useProfile","useCallback","profileModel","power","basePow","atkPercDiff","critRateDiff","critDmgDiff","getSubstatGrowth","max","textKey","stat","gain","getSubstatInfo","critPercDiff","atk20Diff","atk30Diff","atk40Diff","getSpiralBuffs","chamberBuffKey","maxChamber","floorBuffKey","maxFloor","chamberBuff","chamberBuffText","buff","floorBuff","floorBuffText","getSpiralBuffInfo","App","localProfiles","setProfiles","profiles","stringify","addStorageProfile","className","map","v4","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","locale","defaultLocale","messages","document","getElementById"],"mappings":"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","file":"static/js/main.ecc21a07.chunk.js","sourcesContent":["const translate = (intl, key, values) => {\r\n  return intl.formatMessage({ id: key }, values);\r\n};\r\n\r\nexport default translate;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst charProfile = data => {\r\n  if (!data) return null;\r\n  const { name, baseAtk, flatAtk, percAtk, critC, critD, percEle } = data;\r\n\r\n  if (!baseAtk || !flatAtk || !percAtk || !critC || !critD || !percEle)\r\n    return null;\r\n\r\n  const profile = {\r\n    name,\r\n    baseAtk,\r\n    flatAtk,\r\n    percAtk: percAtk,\r\n    critC: critC,\r\n    critD: critD,\r\n    percEle: percEle,\r\n  };\r\n\r\n  return profile;\r\n};\r\n\r\nexport default charProfile;\r\n","export const decimalToPercent = num => {\r\n  return (num * 100).toFixed(2) + '%';\r\n};\r\n","const PROFILES_KEY = 'profiles';\n\nexport const getStorageProfiles = () => {\n  const profilesJson = window.localStorage.getItem(PROFILES_KEY);\n  return profilesJson ? JSON.parse(profilesJson) : {};\n};\n\nexport const addStorageProfile = (id, profile) => {\n  const profiles = getStorageProfiles();\n  console.log('old profiles', profiles);\n  console.log('[new id, profile]', id, profile);\n  profiles[id] = profile;\n  storageAdd(PROFILES_KEY, JSON.stringify(profiles));\n};\n\nexport const storageGet = id => {\n  window.localStorage.getItem(id);\n};\n\nexport const storageAdd = (id, item) => {\n  window.localStorage.setItem(id, item);\n};\n\nexport const storageDelete = id => {\n  window.localStorage.removeItem(id);\n};\n","export const getElePower = profile => {\r\n  const { baseAtk, percAtk, flatAtk, critC, critD, percEle } = profile;\r\n  const artifactAtk = baseAtk * percAtk + flatAtk;\r\n  const sheetAtk = baseAtk + artifactAtk;\r\n  const critPower = 1 + Math.min(1, critC) * critD;\r\n  const elePower = Math.round(sheetAtk * critPower * (1 + percEle));\r\n\r\n  return elePower;\r\n};\r\n\r\nexport const getSpiralBuffs = profile => {\r\n  const { percAtk, critC, critD } = profile;\r\n  const basePow = getElePower(profile);\r\n\r\n  const critBuffPow = getElePower({\r\n    ...profile,\r\n    critC: critC + 0.08,\r\n    critD: critD + 0.15,\r\n  });\r\n\r\n  const atk20Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.2,\r\n  });\r\n\r\n  const atk30Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.3,\r\n  });\r\n\r\n  const atk40Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.4,\r\n  });\r\n\r\n  return {\r\n    critPercDiff: critBuffPow / basePow - 1,\r\n    atk20Diff: atk20Pow / basePow - 1,\r\n    atk30Diff: atk30Pow / basePow - 1,\r\n    atk40Diff: atk40Pow / basePow - 1,\r\n  };\r\n};\r\n\r\nexport const getSubstatGrowth = profile => {\r\n  const { baseAtk, percAtk, flatAtk, critC, critD, percEle } = profile;\r\n  const basePow = getElePower(profile);\r\n\r\n  const atkPercSubPow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.0498,\r\n  });\r\n\r\n  const critRateSubPow = getElePower({\r\n    ...profile,\r\n    critC: critC + 0.033,\r\n  });\r\n\r\n  const critDmgSubPow = getElePower({\r\n    ...profile,\r\n    critD: critD + 0.066,\r\n  });\r\n\r\n  return {\r\n    atkPercDiff: atkPercSubPow / basePow - 1,\r\n    critRateDiff: critRateSubPow / basePow - 1,\r\n    critDmgDiff: critDmgSubPow / basePow - 1,\r\n  };\r\n};\r\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nconst useWhyDidYouUpdate = (name, props) => {\r\n  // Get a mutable ref object where we can store props ...\r\n\r\n  // ... for comparison next time this hook runs.\r\n\r\n  const previousProps = useRef();\r\n\r\n  useEffect(() => {\r\n    if (previousProps.current) {\r\n      // Get all keys from previous and current props\r\n\r\n      const allKeys = Object.keys({ ...previousProps.current, ...props });\r\n\r\n      // Use this object to keep track of changed props\r\n\r\n      const changesObj = {};\r\n\r\n      // Iterate through keys\r\n\r\n      allKeys.forEach(key => {\r\n        // If previous is different from current\r\n\r\n        if (previousProps.current[key] !== props[key]) {\r\n          // Add to changesObj\r\n\r\n          changesObj[key] = {\r\n            from: previousProps.current[key],\r\n\r\n            to: props[key],\r\n          };\r\n        }\r\n      });\r\n\r\n      // If changesObj not empty then output to console\r\n\r\n      if (Object.keys(changesObj).length) {\r\n        console.log('[why-did-you-update]', name, changesObj);\r\n      }\r\n    }\r\n\r\n    // Finally update previousProps with current props for next hook call\r\n\r\n    previousProps.current = props;\r\n  });\r\n};\r\n\r\nexport default useWhyDidYouUpdate;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport translate from '../helpers/translate';\r\nimport charProfile from '../models/characterProfile';\r\nimport { decimalToPercent } from '../helpers/stringHelper';\r\nimport { storageAdd } from '../helpers/storageHelper';\r\nimport {\r\n  getElePower,\r\n  getSpiralBuffs,\r\n  getSubstatGrowth,\r\n} from '../helpers/profileHelper';\r\nimport { v4 } from 'uuid';\r\nimport useWhyDidYouUpdate from '../hooks/whydidyouupdate';\r\n\r\nconst useInput = (id, initState = '', stringId, inputProps = {}) => {\r\n  const intl = useIntl();\r\n  const [state, setState] = useState(initState);\r\n\r\n  const onChange = e => {\r\n    setState(e.currentTarget.value);\r\n  };\r\n  const key = stringId ? stringId : 'profile.' + id;\r\n  const name = translate(intl, key);\r\n  const input = (\r\n    <span>\r\n      {name}\r\n      <input\r\n        type=\"text\"\r\n        id={id}\r\n        name={id}\r\n        onChange={onChange}\r\n        maxLength=\"7\"\r\n        size=\"3\"\r\n        value={state}\r\n        {...inputProps}\r\n      ></input>\r\n    </span>\r\n  );\r\n\r\n  return [input, state, setState];\r\n};\r\n\r\nconst useProfile = (initProfile = {}, onProfileChange) => {\r\n  const [nameComponent, nameState] = useInput('name', initProfile.name, null, {\r\n    size: '10',\r\n    maxLength: '15',\r\n  });\r\n  const [baseAtkComponent, baseAtkState] = useInput(\r\n    'baseAtk',\r\n    initProfile.baseAtk,\r\n  );\r\n  const [flatAtkComponent, flatAtkState] = useInput(\r\n    'flatAtk',\r\n    initProfile.flatAtk,\r\n  );\r\n  const [percAtkComponent, percAtkState] = useInput(\r\n    'percAtk',\r\n    initProfile.percAtk ? initProfile.percAtk * 100 : '',\r\n  );\r\n  const [critRateComponent, critRateState] = useInput(\r\n    'critC',\r\n    initProfile.critC ? initProfile.critC * 100 : '',\r\n  );\r\n  const [critDmgComponent, critDmgState] = useInput(\r\n    'critD',\r\n    initProfile.critD ? initProfile.critD * 100 : '',\r\n  );\r\n  const [eleDmgComponent, eleDmgState] = useInput(\r\n    'eleDmg',\r\n    initProfile.percEle ? initProfile.percEle * 100 : '',\r\n  );\r\n\r\n  useWhyDidYouUpdate('Hello world', {\r\n    baseAtkState,\r\n    flatAtkState,\r\n    percAtkState,\r\n    critRateState,\r\n    critDmgState,\r\n    eleDmgState,\r\n    onProfileChange,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const result = charProfile({\r\n      name: nameState,\r\n      baseAtk: parseInt(baseAtkState),\r\n      flatAtk: parseInt(flatAtkState),\r\n      percAtk: percAtkState / 100,\r\n      critC: critRateState / 100,\r\n      critD: critDmgState / 100,\r\n      percEle: eleDmgState / 100,\r\n    });\r\n\r\n    onProfileChange(result);\r\n  }, [\r\n    nameState,\r\n    baseAtkState,\r\n    flatAtkState,\r\n    percAtkState,\r\n    critRateState,\r\n    critDmgState,\r\n    eleDmgState,\r\n    onProfileChange,\r\n  ]);\r\n\r\n  const components = (\r\n    <React.Fragment>\r\n      {nameComponent}\r\n      {baseAtkComponent}\r\n      {flatAtkComponent}\r\n      {percAtkComponent}\r\n      {critRateComponent}\r\n      {critDmgComponent}\r\n      {eleDmgComponent}\r\n    </React.Fragment>\r\n  );\r\n\r\n  return components;\r\n};\r\n\r\nconst Profile = ({ id, data, onProfileChange }) => {\r\n  const intl = useIntl();\r\n\r\n  const [profileData, setProfileData] = useState(data);\r\n\r\n  useWhyDidYouUpdate('Profile why update?', { onProfileChange, profileData });\r\n  const onProfileUpdate = useCallback(\r\n    profileModel => {\r\n      if (!profileModel) return;\r\n\r\n      setProfileData(profileModel);\r\n      onProfileChange(id, profileModel); // This is hacky/inefficient.  Makes a v4 until the profile is saved\r\n    },\r\n    [id, onProfileChange],\r\n  );\r\n  const components = useProfile(data, onProfileUpdate);\r\n\r\n  const getSubstatInfo = profile => {\r\n    if (profile) {\r\n      const { atkPercDiff, critRateDiff, critDmgDiff } = getSubstatGrowth(\r\n        profile,\r\n      );\r\n\r\n      const max = Math.max(atkPercDiff, critRateDiff, critDmgDiff);\r\n      let textKey = '';\r\n      switch (max) {\r\n        case atkPercDiff:\r\n          textKey = 'profile.substat.atkPercGain';\r\n          break;\r\n        case critRateDiff:\r\n          textKey = 'profile.substat.critRateGain';\r\n          break;\r\n        case critDmgDiff:\r\n          textKey = 'profile.substat.critDmgGain';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      const stat = translate(intl, textKey, { gain: decimalToPercent(max) });\r\n      const info = translate(intl, 'profile.substat.best', { stat: stat });\r\n\r\n      return info;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const getSpiralBuffInfo = () => {\r\n    if (profileData) {\r\n      const { critPercDiff, atk20Diff, atk30Diff, atk40Diff } = getSpiralBuffs(\r\n        profileData,\r\n      );\r\n\r\n      let chamberBuffKey = '';\r\n      const maxChamber = Math.max(\r\n        critPercDiff,\r\n        atk20Diff,\r\n        atk30Diff,\r\n        atk40Diff,\r\n      );\r\n      switch (maxChamber) {\r\n        case critPercDiff:\r\n          chamberBuffKey = 'profile.spiral.critBuffGain';\r\n          break;\r\n        case atk20Diff:\r\n          chamberBuffKey = 'profile.spiral.atk20Gain';\r\n          break;\r\n        case atk30Diff:\r\n          chamberBuffKey = 'profile.spiral.atk30Gain';\r\n          break;\r\n        case atk40Diff:\r\n          chamberBuffKey = 'profile.spiral.atk40Gain';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      let floorBuffKey = '';\r\n      const maxFloor = Math.max(critPercDiff, atk20Diff);\r\n      switch (maxFloor) {\r\n        case critPercDiff:\r\n          floorBuffKey = 'profile.spiral.critBuffGain';\r\n          break;\r\n        case atk20Diff:\r\n          floorBuffKey = 'profile.spiral.atk20Gain';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const chamberBuff = translate(intl, chamberBuffKey, {\r\n        gain: decimalToPercent(maxChamber),\r\n      });\r\n      const chamberBuffText = translate(intl, 'profile.spiral.chamberBuff', {\r\n        buff: chamberBuff,\r\n      });\r\n\r\n      const floorBuff = translate(intl, floorBuffKey, {\r\n        gain: decimalToPercent(maxFloor),\r\n      });\r\n      const floorBuffText = translate(intl, 'profile.spiral.floorBuff', {\r\n        buff: floorBuff,\r\n      });\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <div>{chamberBuffText}</div>\r\n          <div> {floorBuffText}</div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        {components}\r\n        <br />\r\n        {profileData &&\r\n          translate(intl, 'profile.summary.elePower', {\r\n            power: getElePower(profileData),\r\n          })}\r\n        <br />\r\n        {getSubstatInfo(profileData)}\r\n        <br />\r\n        {getSpiralBuffInfo()}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { useEffect, useState } from 'react';\r\nimport { v4 as uuidv4, v4 } from 'uuid';\r\nimport './App.css';\r\nimport createProfile from './components/createProfile';\r\nimport Profile from './components/Profile';\r\nimport { addStorageProfile, getStorageProfiles } from './helpers/storageHelper';\r\n\r\nfunction App() {\r\n  const [localProfiles, setProfiles] = useState({});\r\n\r\n  useEffect(() => {\r\n    const profiles = getStorageProfiles();\r\n    if (profiles) setProfiles(profiles);\r\n  }, []);\r\n\r\n  const onProfileChange = (id, profile) => {\r\n    const profilesJson = getStorageProfiles();\r\n    let objectToStore = {};\r\n    objectToStore[id] = profile;\r\n    addStorageProfile(id, profile);\r\n  };\r\n\r\n  const getProfilesList = () => {\r\n    const keys = Object.keys(localProfiles);\r\n    return keys.map(key => {\r\n      return (\r\n        <Profile\r\n          key={key}\r\n          id={key}\r\n          data={localProfiles[key]}\r\n          onProfileChange={onProfileChange}\r\n        ></Profile>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {getProfilesList()}\r\n      <p></p>\r\n      {/* TODO:  Button to make a new profile */}\r\n      <Profile id={v4()} onProfileChange={onProfileChange}></Profile>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { IntlProvider } from 'react-intl';\r\n\r\nimport messages from './localization/en-US';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <IntlProvider locale=\"en-US\" defaultLocale=\"en-US\" messages={messages}>\r\n      <App />\r\n    </IntlProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default {\r\n  'profile.name': 'Profile Name',\r\n  'profile.character': 'Character',\r\n  'profile.level': 'Level',\r\n  'profile.baseAtk': 'Base Attack',\r\n  'profile.percAtk': 'Atk %',\r\n  'profile.flatAtk': 'Flat Attack',\r\n  'profile.critC': 'Crit Rate',\r\n  'profile.critD': 'Crit Damage',\r\n  'profile.eleDmg': 'Ele %',\r\n  'profile.summary.elePower': 'Elemental Power: {power}',\r\n\r\n  'profile.substat.best': 'Best substat improvement {stat}',\r\n  'profile.substat.atkPercGain': '4.98% Attack. Improvement: {gain}',\r\n  'profile.substat.critRateGain': '3.3% Crit Rate. Improvement: {gain}',\r\n  'profile.substat.critDmgGain': '6.6% Crit Dmg. Improvement: {gain}',\r\n\r\n  'profile.spiral.chamberBuff': 'Best spiral chamber buff is {buff}',\r\n  'profile.spiral.floorBuff': 'Best spiral floor buff is {buff}',\r\n  'profile.spiral.critBuffGain': 'Crit.  Improvement: {gain}',\r\n  'profile.spiral.atk20Gain': '20% Atk.  Improvement: {gain}',\r\n  'profile.spiral.atk30Gain': '30% Atk.  Improvement: {gain}',\r\n  'profile.spiral.atk40Gain': '40% Atk.  Improvement: {gain}',\r\n};\r\n"],"sourceRoot":""}