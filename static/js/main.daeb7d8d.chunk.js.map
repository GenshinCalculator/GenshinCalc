{"version":3,"sources":["helpers/translate.js","models/characterProfile.js","components/Profile.js","helpers/stringHelper.js","App.js","reportWebVitals.js","index.js","localization/en-US.js"],"names":["translate","intl","key","values","formatMessage","id","getElePower","profile","baseAtk","percAtk","flatAtk","critC","critD","percEle","artifactAtk","sheetAtk","critPower","Math","min","elePower","round","console","log","getSpiralBuffs","basePow","critPercDiff","atk20Diff","atk30Diff","atk40Diff","getSubstatGrowth","atkPercDiff","critRateDiff","critDmgDiff","charProfile","data","spiralBuffs","substats","useInput","initState","stringId","useIntl","useState","state","setState","onChange","e","currentTarget","value","name","input","type","maxLength","size","Profile","initProfile","setProfile","baseAtkComponent","baseAtkState","flatAtkComponent","flatAtkState","percAtkComponent","percAtkState","critRateComponent","critRateState","critDmgComponent","critDmgState","eleDmgComponent","eleDmgState","useEffect","result","parseInt","components","Fragment","useProfile","power","max","textKey","stat","gain","num","toFixed","App","localProfiles","setProfiles","profilesJson","window","localStorage","getItem","JSON","parse","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","locale","defaultLocale","messages","document","getElementById"],"mappings":"2OAIeA,EAJG,SAACC,EAAMC,EAAKC,GAC5B,OAAOF,EAAKG,cAAc,CAAEC,GAAIH,GAAOC,I,OCuBnCG,EAAc,SAAAC,GAAY,IACtBC,EAAqDD,EAArDC,QAASC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,QAASC,EAA0BJ,EAA1BI,MAAOC,EAAmBL,EAAnBK,MAAOC,EAAYN,EAAZM,QAC3CC,EAAcN,EAAUC,EAAUC,EAClCK,EAAWP,EAAUM,EACrBE,EAAY,EAAIC,KAAKC,IAAI,EAAGP,GAASC,EACrCO,EAAWF,KAAKG,MAAML,EAAWC,GAAa,EAAIH,IAGxD,OADAQ,QAAQC,IAAIR,EAAaC,EAAUC,EAAWG,GACvCA,GAGHI,EAAiB,SAAAhB,GAAY,IACzBE,EAA0BF,EAA1BE,QAASE,EAAiBJ,EAAjBI,MAAOC,EAAUL,EAAVK,MAClBY,EAAUlB,EAAYC,GAuB5B,MAAO,CACLkB,aAtBkBnB,EAAY,2BAC3BC,GAD0B,IAE7BI,MAAOA,EAAQ,IACfC,MAAOA,EAAQ,OAmBaY,EAAU,EACtCE,UAjBepB,EAAY,2BACxBC,GADuB,IAE1BE,QAASA,EAAU,MAeGe,EAAU,EAChCG,UAberB,EAAY,2BACxBC,GADuB,IAE1BE,QAASA,EAAU,MAWGe,EAAU,EAChCI,UATetB,EAAY,2BACxBC,GADuB,IAE1BE,QAASA,EAAU,MAOGe,EAAU,IAI9BK,EAAmB,SAAAtB,GACsCA,EAArDC,QAD2B,IAClBC,EAA4CF,EAA5CE,QAAkBE,GAA0BJ,EAAnCG,QAAmCH,EAA1BI,OAAOC,EAAmBL,EAAnBK,MACpCY,GADuDjB,EAAZM,QACjCP,EAAYC,IAiB5B,MAAO,CACLuB,YAhBoBxB,EAAY,2BAC7BC,GAD4B,IAE/BE,QAASA,EAAU,SAcUe,EAAU,EACvCO,aAZqBzB,EAAY,2BAC9BC,GAD6B,IAEhCI,MAAOA,EAAQ,QAUgBa,EAAU,EACzCQ,YARoB1B,EAAY,2BAC7BC,GAD4B,IAE/BK,MAAOA,EAAQ,QAMcY,EAAU,IAI5BS,EA9FK,SAAAC,GAClB,IAAKA,EAAM,OAAO,KADQ,IAElB1B,EAAqD0B,EAArD1B,QAASE,EAA4CwB,EAA5CxB,QAASD,EAAmCyB,EAAnCzB,QAASE,EAA0BuB,EAA1BvB,MAAOC,EAAmBsB,EAAnBtB,MAAOC,EAAYqB,EAAZrB,QAEjD,IAAKL,IAAYE,IAAYD,IAAYE,IAAUC,IAAUC,EAC3D,OAAO,KAET,IAAMN,EAAU,CACdC,UACAE,UACAD,QAASA,EACTE,MAAOA,EACPC,MAAOA,EACPC,QAASA,GAGX,OAAO,2BACFN,GADL,IAEEY,SAAUb,EAAYC,GACtB4B,YAAaZ,EAAehB,GAC5B6B,SAAUP,EAAiBtB,MCdzB8B,EAAW,SAAChC,GAAkC,IAA9BiC,EAA6B,uDAAjB,GAAIC,EAAa,uCAC3CtC,EAAOuC,cADoC,EAEvBC,mBAASH,GAFc,mBAE1CI,EAF0C,KAEnCC,EAFmC,KAIjDtB,QAAQC,IAAIjB,EAAIqC,EAAOJ,GAEvB,IAAMM,EAAW,SAAAC,GACfF,EAASE,EAAEC,cAAcC,QAErB7C,EAAMqC,GAAsB,WAAalC,EACzC2C,EAAOhD,EAAUC,EAAMC,GACvB+C,EACJ,iCACGD,EACD,uBACEE,KAAK,OACL7C,GAAIA,EACJ2C,KAAM3C,EACNuC,SAAUA,EACVO,UAAU,IACVC,KAAK,IACLL,MAAOL,OAKb,MAAO,CAACO,EAAOP,EAAOC,IAiHTU,EA9CC,SAAC,GAAc,IAAZnB,EAAW,EAAXA,KACXjC,EAAOuC,cADe,EAhEX,WAAuB,IAAtBc,EAAqB,uDAAP,GAAO,EACTb,mBAAS,MADA,mBAChClC,EADgC,KACvBgD,EADuB,KAGvClC,QAAQC,IAAI,gBAAiBgC,GAHU,MAIEjB,EACvC,UACAiB,EAAY9C,SANyB,mBAIhCgD,EAJgC,KAIdC,EAJc,OAQEpB,EACvC,UACAiB,EAAY5C,SAVyB,mBAQhCgD,EARgC,KAQdC,EARc,OAYEtB,EACvC,UACAiB,EAAY7C,QAAgC,IAAtB6C,EAAY7C,QAAgB,IAdb,mBAYhCmD,EAZgC,KAYdC,EAZc,OAgBIxB,EACzC,QACAiB,EAAY3C,MAA4B,IAApB2C,EAAY3C,MAAc,IAlBT,mBAgBhCmD,EAhBgC,KAgBbC,EAhBa,OAoBE1B,EACvC,QACAiB,EAAY1C,MAA4B,IAApB0C,EAAY1C,MAAc,IAtBT,mBAoBhCoD,EApBgC,KAoBdC,EApBc,OAwBA5B,EACrC,SACAiB,EAAYzC,QAAgC,IAAtByC,EAAYzC,QAAgB,IA1Bb,mBAwBhCqD,EAxBgC,KAwBfC,EAxBe,KA6BvCC,qBAAU,WACR,IAAMC,EAASpC,EAAY,CACzBzB,QAAS8D,SAASb,GAClB/C,QAAS4D,SAASX,GAClBlD,QAASoD,EAAe,IACxBlD,MAAOoD,EAAgB,IACvBnD,MAAOqD,EAAe,IACtBpD,QAASsD,EAAc,MAGrBE,GAAQd,EAAWc,KACtB,CACDZ,EACAE,EACAE,EACAE,EACAE,EACAE,EACAZ,IAGF,IAAMgB,EACJ,eAAC,IAAMC,SAAP,WACGhB,EACAE,EACAE,EACAE,EACAE,EACAE,KAIL,MAAO,CAAC3D,EAASgE,GAKaE,CAAWvC,GAFb,mBAErB3B,EAFqB,KAEZgE,EAFY,KAgC5B,OACE,eAAC,IAAMC,SAAP,WACGD,EACD,uBACChE,GACCP,EAAUC,EAAM,2BAA4B,CAC1CyE,MAAOnE,EAAQY,WAEnB,uBApCqB,SAAAZ,GACvB,GAAIA,EAAS,CAAC,IAAD,EACwCA,EAAQ6B,SAAnDN,EADG,EACHA,YAAaC,EADV,EACUA,aAAcC,EADxB,EACwBA,YAE7B2C,EAAM1D,KAAK0D,IAAI7C,EAAaC,EAAcC,GAC5C4C,EAAU,GACd,OAAQD,GACN,KAAK7C,EACH8C,EAAU,8BACV,MACF,KAAK7C,EACH6C,EAAU,+BACV,MACF,KAAK5C,EACH4C,EAAU,8BAKd,IAAMC,EAAO7E,EAAUC,EAAM2E,EAAS,CAAEE,MC1HdC,ED0HqCJ,GCzHrD,IAANI,GAAWC,QAAQ,GAAK,OD4H5B,OAFgBhF,EAAUC,EAAM,uBAAwB,CAAE4E,KAAMA,IC3HtC,IAAAE,EDgI5B,OAAO,KAYJlD,CAAiBtB,OE3GT0E,MA5Bf,WAAgB,IAAD,EACwBxC,mBAAS,IADjC,mBACNyC,EADM,KACSC,EADT,KAeb,OAZAf,qBAAU,WACR,IAAMgB,EAAeC,OAAOC,aAAaC,QAAQ,aAC7CH,GACF/D,QAAQC,IAAI,mBAAoB8D,GAChCD,EAAYK,KAAKC,MAAML,KAEvBD,EAAY,MAEb,IAKD,qBAAKO,UAAU,MAAf,SACGR,GAAiBA,EAAc,IAC9B,cAAC,EAAD,CAAShD,KAAMgD,EAAc,QCXtBS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAcC,OAAO,QAAQC,cAAc,QAAQC,SCXxC,CACb,oBAAqB,YACrB,gBAAiB,QACjB,kBAAmB,cACnB,kBAAmB,QACnB,kBAAmB,cACnB,gBAAiB,YACjB,gBAAiB,cACjB,iBAAkB,QAClB,2BAA4B,2BAE5B,uBAAwB,gCACxB,8BAA+B,qCAC/B,+BAAgC,gCAChC,8BAA+B,gCDH7B,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.daeb7d8d.chunk.js","sourcesContent":["const translate = (intl, key, values) => {\r\n  return intl.formatMessage({ id: key }, values);\r\n};\r\n\r\nexport default translate;\r\n","const charProfile = data => {\r\n  if (!data) return null;\r\n  const { baseAtk, flatAtk, percAtk, critC, critD, percEle } = data;\r\n\r\n  if (!baseAtk || !flatAtk || !percAtk || !critC || !critD || !percEle)\r\n    return null;\r\n\r\n  const profile = {\r\n    baseAtk,\r\n    flatAtk,\r\n    percAtk: percAtk,\r\n    critC: critC,\r\n    critD: critD,\r\n    percEle: percEle,\r\n  };\r\n\r\n  return {\r\n    ...profile,\r\n    elePower: getElePower(profile),\r\n    spiralBuffs: getSpiralBuffs(profile),\r\n    substats: getSubstatGrowth(profile),\r\n  };\r\n};\r\n\r\nconst getElePower = profile => {\r\n  const { baseAtk, percAtk, flatAtk, critC, critD, percEle } = profile;\r\n  const artifactAtk = baseAtk * percAtk + flatAtk;\r\n  const sheetAtk = baseAtk + artifactAtk;\r\n  const critPower = 1 + Math.min(1, critC) * critD;\r\n  const elePower = Math.round(sheetAtk * critPower * (1 + percEle));\r\n\r\n  console.log(artifactAtk, sheetAtk, critPower, elePower);\r\n  return elePower;\r\n};\r\n\r\nconst getSpiralBuffs = profile => {\r\n  const { percAtk, critC, critD } = profile;\r\n  const basePow = getElePower(profile);\r\n\r\n  const critBuffPow = getElePower({\r\n    ...profile,\r\n    critC: critC + 0.08,\r\n    critD: critD + 0.15,\r\n  });\r\n\r\n  const atk20Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.2,\r\n  });\r\n\r\n  const atk30Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.3,\r\n  });\r\n\r\n  const atk40Pow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.4,\r\n  });\r\n\r\n  return {\r\n    critPercDiff: critBuffPow / basePow - 1,\r\n    atk20Diff: atk20Pow / basePow - 1,\r\n    atk30Diff: atk30Pow / basePow - 1,\r\n    atk40Diff: atk40Pow / basePow - 1,\r\n  };\r\n};\r\n\r\nconst getSubstatGrowth = profile => {\r\n  const { baseAtk, percAtk, flatAtk, critC, critD, percEle } = profile;\r\n  const basePow = getElePower(profile);\r\n\r\n  const atkPercSubPow = getElePower({\r\n    ...profile,\r\n    percAtk: percAtk + 0.0498,\r\n  });\r\n\r\n  const critRateSubPow = getElePower({\r\n    ...profile,\r\n    critC: critC + 0.033,\r\n  });\r\n\r\n  const critDmgSubPow = getElePower({\r\n    ...profile,\r\n    critD: critD + 0.066,\r\n  });\r\n\r\n  return {\r\n    atkPercDiff: atkPercSubPow / basePow - 1,\r\n    critRateDiff: critRateSubPow / basePow - 1,\r\n    critDmgDiff: critDmgSubPow / basePow - 1,\r\n  };\r\n};\r\n\r\nexport default charProfile;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useIntl } from 'react-intl';\r\nimport translate from '../helpers/translate';\r\nimport charProfile from '../models/characterProfile';\r\nimport { decimalToPercent } from '../helpers/stringHelper';\r\n\r\nconst useInput = (id, initState = '', stringId) => {\r\n  const intl = useIntl();\r\n  const [state, setState] = useState(initState);\r\n\r\n  console.log(id, state, initState);\r\n\r\n  const onChange = e => {\r\n    setState(e.currentTarget.value);\r\n  };\r\n  const key = stringId ? stringId : 'profile.' + id;\r\n  const name = translate(intl, key);\r\n  const input = (\r\n    <span>\r\n      {name}\r\n      <input\r\n        type=\"text\"\r\n        id={id}\r\n        name={id}\r\n        onChange={onChange}\r\n        maxLength=\"7\"\r\n        size=\"5\"\r\n        value={state}\r\n      ></input>\r\n    </span>\r\n  );\r\n\r\n  return [input, state, setState];\r\n};\r\n\r\nconst useProfile = (initProfile = {}) => {\r\n  const [profile, setProfile] = useState(null);\r\n\r\n  console.log('init profile:', initProfile);\r\n  const [baseAtkComponent, baseAtkState] = useInput(\r\n    'baseAtk',\r\n    initProfile.baseAtk,\r\n  );\r\n  const [flatAtkComponent, flatAtkState] = useInput(\r\n    'flatAtk',\r\n    initProfile.flatAtk,\r\n  );\r\n  const [percAtkComponent, percAtkState] = useInput(\r\n    'percAtk',\r\n    initProfile.percAtk ? initProfile.percAtk * 100 : '',\r\n  );\r\n  const [critRateComponent, critRateState] = useInput(\r\n    'critC',\r\n    initProfile.critC ? initProfile.critC * 100 : '',\r\n  );\r\n  const [critDmgComponent, critDmgState] = useInput(\r\n    'critD',\r\n    initProfile.critD ? initProfile.critD * 100 : '',\r\n  );\r\n  const [eleDmgComponent, eleDmgState] = useInput(\r\n    'eleDmg',\r\n    initProfile.percEle ? initProfile.percEle * 100 : '',\r\n  );\r\n\r\n  useEffect(() => {\r\n    const result = charProfile({\r\n      baseAtk: parseInt(baseAtkState),\r\n      flatAtk: parseInt(flatAtkState),\r\n      percAtk: percAtkState / 100,\r\n      critC: critRateState / 100,\r\n      critD: critDmgState / 100,\r\n      percEle: eleDmgState / 100,\r\n    });\r\n\r\n    if (result) setProfile(result);\r\n  }, [\r\n    baseAtkState,\r\n    flatAtkState,\r\n    percAtkState,\r\n    critRateState,\r\n    critDmgState,\r\n    eleDmgState,\r\n    setProfile,\r\n  ]);\r\n\r\n  const components = (\r\n    <React.Fragment>\r\n      {baseAtkComponent}\r\n      {flatAtkComponent}\r\n      {percAtkComponent}\r\n      {critRateComponent}\r\n      {critDmgComponent}\r\n      {eleDmgComponent}\r\n    </React.Fragment>\r\n  );\r\n\r\n  return [profile, components];\r\n};\r\n\r\nconst Profile = ({ data }) => {\r\n  const intl = useIntl();\r\n  const [profile, components] = useProfile(data);\r\n\r\n  const getSubstatGrowth = profile => {\r\n    if (profile) {\r\n      const { atkPercDiff, critRateDiff, critDmgDiff } = profile.substats;\r\n\r\n      const max = Math.max(atkPercDiff, critRateDiff, critDmgDiff);\r\n      let textKey = '';\r\n      switch (max) {\r\n        case atkPercDiff:\r\n          textKey = 'profile.substat.atkPercGain';\r\n          break;\r\n        case critRateDiff:\r\n          textKey = 'profile.substat.critRateGain';\r\n          break;\r\n        case critDmgDiff:\r\n          textKey = 'profile.substat.critDmgGain';\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      const stat = translate(intl, textKey, { gain: decimalToPercent(max) });\r\n      const substat = translate(intl, 'profile.substat.best', { stat: stat });\r\n\r\n      return substat;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {components}\r\n      <br />\r\n      {profile &&\r\n        translate(intl, 'profile.summary.elePower', {\r\n          power: profile.elePower,\r\n        })}\r\n      <br />\r\n      {getSubstatGrowth(profile)}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","export const decimalToPercent = num => {\r\n  return (num * 100).toFixed(2) + '%';\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport createProfile from './components/createProfile';\r\nimport Profile from './components/Profile';\r\n\r\nfunction App() {\r\n  const [localProfiles, setProfiles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const profilesJson = window.localStorage.getItem('profileId');\r\n    if (profilesJson) {\r\n      console.log('reading profile:', profilesJson);\r\n      setProfiles(JSON.parse(profilesJson));\r\n    } else {\r\n      setProfiles([]);\r\n    }\r\n  }, []);\r\n\r\n  // console.log('localProfiles:', localProfiles);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {localProfiles && localProfiles[0] && (\r\n        <Profile data={localProfiles[0]}></Profile>\r\n      )}\r\n      {/* {localProfiles && localProfiles[1] && (\r\n        <Profile data={localProfiles[1]}></Profile>\r\n      )}\r\n      <Profile></Profile> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { IntlProvider } from 'react-intl';\r\n\r\nimport messages from './localization/en-US';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <IntlProvider locale=\"en-US\" defaultLocale=\"en-US\" messages={messages}>\r\n      <App />\r\n    </IntlProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default {\r\n  'profile.character': 'Character',\r\n  'profile.level': 'Level',\r\n  'profile.baseAtk': 'Base Attack',\r\n  'profile.percAtk': 'Atk %',\r\n  'profile.flatAtk': 'Flat Attack',\r\n  'profile.critC': 'Crit Rate',\r\n  'profile.critD': 'Crit Damage',\r\n  'profile.eleDmg': 'Ele %',\r\n  'profile.summary.elePower': 'Elemental Power: {power}',\r\n\r\n  'profile.substat.best': 'Next stat to target -- {stat}',\r\n  'profile.substat.atkPercGain': 'Attack Percent Improvement: {gain}',\r\n  'profile.substat.critRateGain': 'Crit Rate Improvement: {gain}',\r\n  'profile.substat.critDmgGain': 'Crit Dmg Improvement: {gain}',\r\n};\r\n"],"sourceRoot":""}